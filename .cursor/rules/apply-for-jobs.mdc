---
description: 
globs: 
alwaysApply: false
---
# Instructions for Applying for Jobs on My Behalf

- Do not lie or hallucinate. Use only real projects that I've mentioned. For example, when asked to mention an open-source project, you should only mention my projects that have "github.com" in their URL.
- Apply for jobs using Playwright MCP tool.
- Please complete all the fields in the application, but do not submit it. I will review everything, make any necessary edits, and submit the application myself.
- I want to be able to edit the application after you have filled in all the information. Please run Playwright like a regular browser, not a headless one, so that it does not display the message "Chrome is being controlled by automated test software.
- My resume in PDF format - [resume.pdf](mdc:resume.pdf). Upload it when applying to a job.
- Please upload my resume as the first thing. Application websites often autofill certain fields with information from it. If the website offers an option to autofill from your resume, please use that feature before you start entering information.
- Fill all the required fields.
- Please provide only the information requested. For example, if you are asked for a GitHub URL, submit only the URL without any additional text.
- Ensure that all your text sounds human. It's crutial that the application won't be marked as a spam.
- If you don't have certain information, please leave that section blank; do not enter incorrect data. For example, since I didn't provide you with my phone number, please do not fill it in on the application.
- When asked for a portfolio link, please provide the URL to my YouTube channel, as it serves as my portfolio.
- Please do not mention my salary expectations unless specifically requested.
- If it's not required to add cover letter or provide additional information, do not provide it.

# Context

My name is Radzion Chachura. I'm based in Georgia (country), I am seeking a front-end position in web3 and am also open to full-stack roles. I'm not open to relocation.

## Salary Expectations

I target a salary of $150k per year. The minimum I would accept is $120k.

## Job Experience

### Senior Front-end Engineer at Vultisig (Aug 2024 - Present)

At [Vultisig](mdc:https:/vultisig.com), I'm developing a cross-chain desktop wallet supporting EVM chains, UTXO chains, Solana, Polkadot, and more. Built with React and TypeScript using Wails, the application runs natively on Windows, Linux, and macOS. My responsibilities include architecting the application, creating the UI, implementing chain integrations, and developing MPC (Multi-Party Computation) functionality. This MPC approach significantly enhances security by eliminating the need for a single mnemonic phrase, instead allowing users to sign transactions across multiple devices for improved security and redundancy.

### Front-end Engineer at Terraform Labs (Mar 2022 - Jul 2024)

At Terraform Labs, I worked on **Anchor Protocol**, one of the largest DeFi protocols in web3 at the time. Using React and TypeScript, I contributed new features to the app.

I was part of the team developing two NFT protocols on Terra, where I was responsible for building the front-end for both projects using React/Next.js and TypeScript.

Later, I took charge of both the front-end and back-end of **Enterprise Protocol**â€”a DAO management tool for the Terra ecosystem that allowed protocols to manage their treasury and governance, and enabled users to participate in governance. It supported NFT DAOs, Token DAOs, and multi-sigs. We added cross-chain support for other Cosmos chains, allowing DAOs to create treasuries on different Cosmos chains while keeping the governance on Terra.

The project was built within a TypeScript monorepo, with React/Next.js on the front-end and Node.js with DynamoDB on the back-end. The back-end consisted of an API and an indexer. The Enterprise Protocol had $65 million in treasury holdings at its peak. The project was initiated using **RadzionKit** and is actually a fork of it.

### Front-end Engineer at IOG (Sep 2021 - Feb 2022)

At IOG, I worked on [Lace](mdc:https:/www.lace.io), a Cardano light wallet built with React and TypeScript. I was involved in developing the NFT gallery, balances, transaction history, and general product improvements.

### Front-end Engineer at Zerion (Oct 2020 - Aug 2021)

At Zerion, I worked on the [Zerion web app](mdc:https:/app.zerion.io) built with React and TypeScript. I was responsible for wallet management and integrations with different wallets, improving the user experience when exchanging tokens, adding staking features, and implementing internationalization support.

### Senior Software Engineer at Kontist (Jul 2019 - Sep 2020)

At Kontist, I worked as a full-stack engineer. I was involved in improving the onboarding and account creation process, adding new features to the app, and helping to launch a web app for the product. I worked with React Native on the mobile app, Node.js with PostgreSQL on the back-end, and React with TypeScript on the web app.

### Software Developer at KREO (Apr 2017 - Jun 2019)

At KREO, I was one of the first developers of and was responsible for the web stack of a construction and architecture software - [KREO](mdc:https:/www.kreo.net). I led the development of the web app built with React and TypeScript and was responsible for key features like a construction site management tool that allowed editing the site directly on the map, and a floor plan editor that enabled creating and editing floor plans of buildings, moving walls, windows, doors, etc. I also managed infrastructure using Terraform and AWS, and developed the API for the app built with Node.js, GraphQL, and DynamoDB.

## My Projects

### Increaser ([increaser.org](mdc:https:/increaser.org))

Increaser is a productivity toolkit developed specifically for knowledge workers, offering a suite of tools that support vision planning, goal tracking, time management, habit development, among others. The app, built as a TypeScript monorepo and hosted on AWS with Terraform, is optimized as a PWA and enables users to organize their tasks, manage work budgets, and schedule focused work sessions. Each tool is meticulously designed to help remote workers and digital professionals enhance productivity and create a better work-life balance. As the sole founder, I have led its development, handling all technical, architectural, and deployment aspects to deliver a powerful, accessible productivity solution. It has a great UX/UI that I crafted over the years.

### RadzionKit ([github.com/radzionc/radzionkit](mdc:https:/github.com/radzionc/radzionkit))

RadzionKit is a versatile full-stack development toolkit designed to streamline and enhance coding projects with a suite of integrated, easy-to-use packages. It's structured as a TypeScript monorepo and designed for a stack with React (optional Next.js), Node.js, DynamoDB, and Terraform (AWS). Most of the code is for the front-end and contains a lot of reusable components, hooks, and utilities built without depending on any UI library. The project has more than 250 stars on GitHub.

### Radzion Dev ([youtube.com/c/radzion](mdc:https:/www.youtube.com/c/radzion))

I have a YouTube channel with 2,000 subscribers that focuses on software development, particularly in web development and front-end technologies. The channel covers topics such as React, TypeScript, Node.js, AWS, and working within a monorepo.

## Contacts

- **Email**: [radzionc@gmail.com](mdc:mailto:radzionc@gmail.com)
- **X (Twitter)**: [twitter.com/radzionc](mdc:https:/twitter.com/radzionc)
- **LinkedIn**: [linkedin.com/in/radzion](mdc:https:/www.linkedin.com/in/radzion)
- **GitHub**: [github.com/radzionc](mdc:https:/github.com/radzionc)
- **Telegram**: [t.me/radzionc](mdc:https:/t.me/radzionc)

My resume is also available online at https://resume.radzion.com.